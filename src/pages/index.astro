---
import BaseLayout from '../layouts/BaseLayout.astro';
import { getFormattedDatabase } from '../lib/notion';
import type { FormattedPage } from '../lib/notion';

// 最新の投稿を取得
let recentPosts: FormattedPage[] = [];
let error: string | null = null;

try {
  const allPosts = await getFormattedDatabase();
  // 最新の4件を表示
  recentPosts = allPosts.slice(0, 4);
} catch (e) {
  console.error('Error fetching Notion database:', e);
  error = e instanceof Error ? e.message : '不明なエラー';
}
---

<BaseLayout title="ホーム">
  <section class="mb-12">
    <div class="flex justify-between items-center mb-6">
      <h2 class="text-2xl font-bold">最新の記事</h2>
      <a href="/posts" class="text-blue-600 dark:text-blue-400 hover:underline"
        >すべての記事を見る</a
      >
    </div>

    {
      error && (
        <div class="bg-red-100 dark:bg-red-900 border border-red-400 dark:border-red-700 text-red-700 dark:text-red-300 px-4 py-3 rounded mb-6">
          <p>
            <strong>エラー:</strong> データの取得に失敗しました。
          </p>
          <p class="text-sm">{error}</p>
        </div>
      )
    }

    {/* 投稿がない場合のメッセージ */}

    {
      recentPosts.length === 0 && !error ? (
        <p class="text-gray-500 dark:text-gray-400">投稿がまだありません。</p>
      ) : (
        <div class="grid gap-6 md:grid-cols-2">
          {recentPosts.map((post) => (
            <Fragment key={post.id}>
              <a
                href={`/posts/${post.slug}`}
                class="block border border-gray-200 dark:border-gray-700 rounded-lg p-6 hover:shadow-md dark:hover:shadow-gray-800 transition-shadow"
              >
                <h3 class="text-xl font-bold mb-2">{post.title || '無題'}</h3>

                {post.summary && (
                  <p class="text-gray-600 dark:text-gray-400 mb-3">{post.summary}</p>
                )}

                {post.date && (
                  <p class="text-sm text-gray-500 dark:text-gray-500 mb-2">
                    公開日: {new Date(post.date).toLocaleDateString('ja-JP')}
                  </p>
                )}

                {post.tags && post.tags.length > 0 && (
                  <div class="flex flex-wrap gap-2 mt-3">
                    {post.tags.map((tag, index) => (
                      <span
                        key={`tag-${index}`}
                        class="bg-gray-100 dark:bg-gray-800 text-gray-800 dark:text-gray-200 text-xs px-2 py-1 rounded"
                      >
                        {tag.name}
                      </span>
                    ))}
                  </div>
                )}
              </a>
            </Fragment>
          ))}
        </div>
      )
    }
  </section>
</BaseLayout>
